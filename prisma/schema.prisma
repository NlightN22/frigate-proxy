// This is your Prisma schema file,
// Update prisma: yarn prisma generate
// Create prisma migration: yarn prisma migrate dev --name make-serverid-optional
// Update MongoDB and prisma client: yarn prisma db push
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Camera {
  id            String           @id @default(auto()) @map("_id") @db.ObjectId
  createAt      DateTime         @default(now())
  updateAt      DateTime         @updatedAt
  name          String
  url           String?
  frigateHost   FrigateHost?     @relation(fields: [frigateHostId], references: [id], onDelete: Cascade)
  frigateHostId String?          @db.ObjectId
  roles         Role[]           @relation(fields: [rolesIDs], references: [id])
  rolesIDs      String[]
  state         Boolean?
  config        Json?
  tagIds        String[]         @db.ObjectId
}

model FrigateHost {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt
  name     String   @unique
  host     String   @unique
  enabled  Boolean? @default(true)
  cameras  Camera[]
  state    Boolean?
}

model Role {
  id        String   @id @map("_id")
  createAt  DateTime @default(now())
  updateAt  DateTime @updatedAt
  name      String   @unique
  cameras   Camera[] @relation(fields: [cameraIDs], references: [id])
  cameraIDs String[] @db.ObjectId
}

model OIDPsession {
  id                 Int    @id @map("_id")
  access_token       String @unique
  expires_in         Int
  refresh_expires_in Int
  refresh_token      String
  token_type         String
}

model AppSettings {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  key         String  @unique
  value       String
  encrypted   Boolean
  description String?
}

model UserTags {
  id            String       @id @default(auto()) @map("_id") @db.ObjectId
  createAt      DateTime     @default(now())
  updateAt      DateTime     @updatedAt
  value         String       
  userId        String
  @@unique([value, userId])
}

